// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductServiceAPI.Data;

#nullable disable

namespace ProductServiceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductServiceAPI.Models.ProductService", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 3,
                            Description = "Fast and reliable product delivery service.",
                            Name = "Express Delivery",
                            Price = 20.0,
                            UserId = 125,
                            isAvailable = true
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "Elegant and festive gift wrapping for all occasions.",
                            Name = "Gift Wrapping",
                            Price = 2.9900000000000002,
                            UserId = 126,
                            isAvailable = true
                        },
                        new
                        {
                            ProductId = 1,
                            Description = "Description of Product A",
                            Name = "Product A",
                            Price = 100.0,
                            UserId = 123,
                            isAvailable = true
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "Description of Product B",
                            Name = "Product B",
                            Price = 150.0,
                            UserId = 124,
                            isAvailable = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
