// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransactionServiceAPI.Data;

#nullable disable

namespace TransactionServiceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240123022307_AddTransactionServiceToDb")]
    partial class AddTransactionServiceToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransactionServiceAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountNumber"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AccountNumber");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountNumber = 1,
                            Balance = 1000m,
                            Currency = "USD",
                            IsActive = true,
                            UserId = 1
                        },
                        new
                        {
                            AccountNumber = 2,
                            Balance = 500m,
                            Currency = "EUR",
                            IsActive = true,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("TransactionServiceAPI.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinationAccount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SourceAccount")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            Date = new DateTime(2024, 1, 23, 2, 23, 7, 344, DateTimeKind.Utc).AddTicks(411),
                            DestinationAccount = 2,
                            ProductId = 0,
                            SourceAccount = 1,
                            TransactionAmount = 100m,
                            TransactionStatus = 1
                        },
                        new
                        {
                            TransactionId = 2,
                            Date = new DateTime(2024, 1, 22, 2, 23, 7, 344, DateTimeKind.Utc).AddTicks(414),
                            DestinationAccount = 1,
                            ProductId = 0,
                            SourceAccount = 2,
                            TransactionAmount = 50m,
                            TransactionStatus = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
